@model IEnumerable<DAL_Group4_E_Commerce.Models.Product>
@{
    ViewData["Title"] = "Shop";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var selectedCategoryId = Context.Request.Query["categoryId"].ToString();
    var selectedSupplierId = Context.Request.Query["supplierId"].ToString();
    var keyword = Context.Request.Query["keyword"].ToString();
}

<!-- Breadcrumb -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-12">
            <nav class="breadcrumb bg-light mb-30">
                <a class="breadcrumb-item text-dark" href="/">Home</a>
                <span class="breadcrumb-item active">Shop</span>
            </nav>
        </div>
    </div>
</div>

<!-- Shop -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <!-- Sidebar (add filters later) -->
        <div class="col-lg-3 col-md-4">
            <form method="get" action="@Url.Action("Index", "Product")" class="mb-4">
                <div class="form-group">
                    <label for="categoryId">Category</label>
                    <select class="form-control" id="categoryId" name="categoryId">
                        <option value="">All</option>
                        @if (ViewBag.Categories != null)
                        {
                            foreach (var cat in ViewBag.Categories)
                            {
                                if (selectedCategoryId == cat.CategoryId.ToString())
                                {
                                    <option value="@cat.CategoryId" selected>@cat.CategoryName</option>
                                }
                                else
                                {
                                    <option value="@cat.CategoryId">@cat.CategoryName</option>
                                }
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="supplierId">Supplier</label>
                    <select class="form-control" id="supplierId" name="supplierId">
                        <option value="">All</option>
                        @if (ViewBag.Suppliers != null)
                        {
                            foreach (var sup in ViewBag.Suppliers)
                            {
                                if (selectedSupplierId == sup.SupplierId.ToString())
                                {
                                    <option value="@sup.SupplierId" selected>@sup.CompanyName</option>
                                }
                                else
                                {
                                    <option value="@sup.SupplierId">@sup.CompanyName</option>
                                }
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="keyword">Keyword</label>
                    <input type="text" class="form-control" id="keyword" name="keyword" value="@keyword" placeholder="Search..." />
                </div>
                <button type="submit" class="btn btn-primary w-100">Filter</button>
            </form>
        </div>

        <!-- Product Grid -->
        <div class="col-lg-9 col-md-8">
            <div id="product-list-container">
                @Html.Partial("_ProductListPartial", Model)
            </div>
            <nav>
                <ul class="pagination justify-content-center">
                    @{
                        int total = ViewBag.Total ?? 0;
                        int page = ViewBag.Page ?? 1;
                        int pageSize = ViewBag.PageSize ?? 9;
                        int totalPages = (int)Math.Ceiling((double)total / pageSize);
                        string queryString = $"&categoryId={selectedCategoryId}&supplierId={selectedSupplierId}&keyword={keyword}";
                    }
                    @if (totalPages > 1)
                    {
                        for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == page ? "active" : "")">
                                <a class="page-link page-ajax-link" href="#" data-page="@i">@i</a>
                            </li>
                        }
                    }
                </ul>
            </nav>
        </div>
        <!-- /Product Grid -->
    </div>
</div>
<!-- Shop End -->
<div id="compare-float-btn" style="position:fixed;bottom:40px;right:40px;z-index:9999;display:none;">
    <button class="btn btn-primary btn-lg shadow" id="go-compare-btn">
        ðŸ”„ View Compare (<span id="compare-count">0</span>)
    </button>
</div>
@section Scripts {
    <script>
        // Helper: get/set array from localStorage
        function getList(key) {
            return JSON.parse(localStorage.getItem(key) || '[]');
        }
        function setList(key, arr) {
            localStorage.setItem(key, JSON.stringify(arr));
        }

        // Update icon state when page loads or after AJAX load
        function updateIcons() {
            var wishlist = getList('wishlist');
            var compare = getList('compare');
            $('.wishlist-btn').each(function () {
                var pid = $(this).data('product-id');
                if (wishlist.includes(pid)) {
                    $(this).addClass('active-wishlist').attr('title', 'Remove from favorites').tooltip('dispose').tooltip();
                } else {
                    $(this).removeClass('active-wishlist').attr('title', 'Favorite').tooltip('dispose').tooltip();
                }
            });
            $('.compare-btn').each(function () {
                var pid = $(this).data('product-id');
                if (compare.includes(pid)) {
                    $(this).addClass('active-compare').attr('title', 'Remove from compare').tooltip('dispose').tooltip();
                } else {
                    $(this).removeClass('active-compare').attr('title', 'Compare').tooltip('dispose').tooltip();
                }
            });
            updateCompareBtn();
        }

        // Handle click wishlist
        $(document).on('click', '.wishlist-btn', function (e) {
            e.preventDefault();
            var pid = $(this).data('product-id');
            var wishlist = getList('wishlist');
            if (wishlist.includes(pid)) {
                wishlist = wishlist.filter(x => x !== pid);
            } else {
                wishlist.push(pid);
            }
            setList('wishlist', wishlist);
            updateIcons();
        });

        // Handle click compare
        $(document).on('click', '.compare-btn', function (e) {
            e.preventDefault();
            var pid = $(this).data('product-id');
            var compare = getList('compare');
            if (compare.includes(pid)) {
                compare = compare.filter(x => x !== pid);
            } else {
                if (compare.length >= 4) {
                    alert('You can only compare up to 4 products!');
                    return;
                }
                compare.push(pid);
            }
            setList('compare', compare);
            updateIcons();
        });

        // When page loads, update icons
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
            updateIcons();
        });

        // Re-run updateIcons after every AJAX product list load (pagination, filter)
        function afterAjaxProductList() {
            $('[data-toggle="tooltip"]').tooltip();
            updateIcons();
        }

        // Hook into AJAX load for pagination/filter
        // (Find the $.get or AJAX call that loads products, then add afterAjaxProductList in its callback)
        // Example:
        // $.get(..., function(data) { $('#product-list-container').html(data); afterAjaxProductList(); });

        // If you use a different function name, change accordingly!

        function loadProductsAjax(params, pushUrl = true) {
            $.get('@Url.Action("AjaxList", "Product")', params, function (data) {
                $('#product-list-container').html(data);
                if (pushUrl) {
                    const url = new URL(window.location.href);
                    url.searchParams.set('categoryId', params.categoryId || '');
                    url.searchParams.set('supplierId', params.supplierId || '');
                    url.searchParams.set('keyword', params.keyword || '');
                    url.searchParams.set('page', params.page || 1);
                    window.history.pushState(params, '', url.pathname + url.search);
                }
                afterAjaxProductList();
            });
        }

        $(document).on('click', '.page-ajax-link', function (e) {
            e.preventDefault();
            var page = $(this).data('page');
            var categoryId = $('#categoryId').val();
            var supplierId = $('#supplierId').val();
            var keyword = $('#keyword').val();
            loadProductsAjax({ categoryId, supplierId, keyword, page });
        });

        // AJAX for filter form
        $(document).on('submit', 'form', function (e) {
            if ($(this).find('#categoryId').length > 0) {
                e.preventDefault();
                var categoryId = $('#categoryId').val();
                var supplierId = $('#supplierId').val();
                var keyword = $('#keyword').val();
                loadProductsAjax({ categoryId, supplierId, keyword, page: 1 });
            }
        });

        // Listen to back/forward
        window.addEventListener('popstate', function (event) {
            var params = event.state;
            if (params) {
                loadProductsAjax(params, false);
            } else {
                // If there is no state, read from URL
                var url = new URL(window.location.href);
                var categoryId = url.searchParams.get('categoryId') || '';
                var supplierId = url.searchParams.get('supplierId') || '';
                var keyword = url.searchParams.get('keyword') || '';
                var page = url.searchParams.get('page') || 1;
                loadProductsAjax({ categoryId, supplierId, keyword, page }, false);
            }
        });

        // When page loads, if there is query string then automatically load correct state (only when not first page)
        $(document).ready(function () {
            var url = new URL(window.location.href);
            var hasQuery = url.search.length > 0;
            if (hasQuery) {
                var categoryId = url.searchParams.get('categoryId') || '';
                var supplierId = url.searchParams.get('supplierId') || '';
                var keyword = url.searchParams.get('keyword') || '';
                var page = url.searchParams.get('page') || 1;
                loadProductsAjax({ categoryId, supplierId, keyword, page }, false);
            }
        });

        // Show floating Compare button if there are selected products
        function updateCompareBtn() {
            var compare = getList('compare');
            if (compare.length > 0) {
                $('#compare-float-btn').show();
                $('#compare-count').text(compare.length);
            } else {
                $('#compare-float-btn').hide();
            }
        }

        // When clicking the "Compare" button
        $(document).on('click', '#go-compare-btn', function () {
            var compare = getList('compare');
            if (compare.length === 0) return;
            window.location.href = '/Product/Compare?ids=' + compare.join(',');
        });
    </script>
    <style>
        .active-wishlist {
            color: #dc3545 !important;
            background: #ffe6ea !important;
            border-color: #dc3545 !important;
        }

        .active-compare {
            color: #007bff !important;
            background: #e6f0ff !important;
            border-color: #007bff !important;
        }
    </style>
}
