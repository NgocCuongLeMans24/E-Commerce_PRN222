@model ViewModels.SalesAnalyticsViewModel
@{
    ViewData["Title"] = "Sales Analytics";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="analytics-dashboard">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">Sales Analytics Dashboard</h2>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-primary active" data-period="daily">Daily</button>
            <button type="button" class="btn btn-outline-primary" data-period="weekly">Weekly</button>
            <button type="button" class="btn btn-outline-primary" data-period="monthly">Monthly</button>
        </div>
    </div>

    <!-- Key Metrics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Sales</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">VND @(Model.TotalSales.ToString("N2"))</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Monthly Sales</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">VND @Model.MonthlySales.ToString("N2")</div>
                            @if (Model.MonthlyGrowthPercentage != 0)
                            {
                                <div class="text-xs @(Model.MonthlyGrowthPercentage > 0 ? "text-success" : "text-danger")">
                                    @(Model.MonthlyGrowthPercentage > 0 ? "+" : "")@Model.MonthlyGrowthPercentage.ToString("N1")%
                                </div>
                            }
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Total Orders</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalOrders</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-shopping-cart fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Avg Order Value</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">VND @Model.AverageOrderValue.ToString("N2")</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row">
        <!-- Sales Trend Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Sales Trend</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="salesTrendChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Top Products -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Top Selling Products</h6>
                </div>
                <div class="card-body">
                    @foreach (var product in Model.TopProducts.Take(5))
                    {
                        <div class="mb-3">
                            <div class="small text-gray-500">@product.ProductName</div>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                     style="width: @((product.TotalRevenue / Model.TopProducts.Max(p => p.TotalRevenue)) * 100)%">
                                </div>
                            </div>
                            <div class="d-flex justify-content-between mt-1">
                                <small class="text-muted">@product.TotalQuantity sold</small>
                                <small class="font-weight-bold">VND @product.TotalRevenue.ToString("N2")</small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Additional Metrics Row -->
    <div class="row">
        <div class="col-lg-6 mb-4">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Quick Stats</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="text-center">
                                <div class="h4 font-weight-bold text-primary">VND @Model.WeeklySales.ToString("N0")</div>
                                <div class="text-muted">This Week</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="text-center">
                                <div class="h4 font-weight-bold text-success">VND @Model.DailySales.ToString("N0")</div>
                                <div class="text-muted">Today</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6 mb-4">
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Actions</h6>
                </div>
                <div class="card-body">
                    <a href="@Url.Action("Sales", "Analytics")" class="btn btn-primary btn-block mb-2">
                        <i class="fas fa-chart-bar"></i> Detailed Sales Report
                    </a>
                    @* <button class="btn btn-outline-secondary btn-block" onclick="exportData()"> *@
                    @*     <i class="fas fa-download"></i> Export Data *@
                    @* </button> *@
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let salesChart;

        // Initialize chart
        document.addEventListener('DOMContentLoaded', function() {
            initializeSalesChart();

            // Period selector event handlers
            document.querySelectorAll('[data-period]').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('[data-period]').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    updateChart(this.dataset.period);
                });
            });
        });

        function initializeSalesChart() {
            const ctx = document.getElementById('salesTrendChart').getContext('2d');
            const trendData = @Html.Raw(Json.Serialize(Model.SalesTrend));

            salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: trendData.map(d => new Date(d.date).toLocaleDateString()),
                    datasets: [{
                        label: 'Sales',
                        data: trendData.map(d => d.amount),
                        borderColor: '#4e73df',
                        backgroundColor: 'rgba(78, 115, 223, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return 'VND' + value.toLocaleString();
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Sales: VND' + context.parsed.y.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateChart(period) {
            fetch(`/Analytics/GetSalesData?period=${period}`)
                .then(response => response.json())
                .then(data => {
                    salesChart.data.labels = data.map(d => d.date);
                    salesChart.data.datasets[0].data = data.map(d => d.amount);
                    salesChart.update();
                })
                .catch(error => console.error('Error updating chart:', error));
        }

        function exportData() {
            // Placeholder for export functionality
            alert('Export functionality will be implemented');
        }
    </script>
}
