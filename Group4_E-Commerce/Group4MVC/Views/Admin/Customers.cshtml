@model ViewModels.CustomerManagementViewModel
@{
    ViewData["Title"] = "Customer Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
<link rel="stylesheet" href="~/css/customer-management/index.css" />
}

<div class="management-container">
    <div class="container-fluid">
        <!-- Header -->
        <div class="management-header">
            <h1 class="page-title">👥 Customer Management</h1>
            @if (ViewBag.CanAddWebPage == true)
            {
                <button type="button" class="btn-primary" onclick="openCustomerModal()">
                    ➕ Add New Customer
                </button>
            }
        </div>

        <!-- Filters -->
        <div class="filters-card">
            <form method="get" asp-action="Customers">
                <div class="filters-grid">
                    <div class="form-group">
                        <label class="form-label">Search</label>
                        <input asp-for="SearchTerm" class="form-input" placeholder="Search by name, email, or ID...">
                    </div>

                    <div class="form-group">
                        <label class="form-label">Status</label>
                        <select asp-for="StatusFilter" class="form-select">
                            <option value="All">All Status</option>
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Sort By</label>
                        <select asp-for="SortBy" class="form-select">
                            <option value="FullName">Name</option>
                            <option value="Email">Email</option>
                            <option value="BirthDate">Birth Date</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Order</label>
                        <select asp-for="SortOrder" class="form-select">
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn-secondary">🔍 Filter</button>
                    </div>
                </div>
            </form>
        </div>

        <!-- Customers Table -->
        <div class="table-card">
            <div class="table-responsive">
                <table class="customers-table">
                    <thead>
                        <tr>
                            <th>Customer</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Gender</th>
                            <th>Birth Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var customer in Model.Customers)
                        {
                                <tr>
                                    <td>
                                        <div class="customer-info">
                                            <div class="customer-avatar">
                                            @customer.FullName.Substring(0, 1).ToUpper()
                                            </div>
                                            <div class="customer-details">
                                                <div class="customer-name">@customer.FullName</div>
                                                <div class="customer-id">@customer.CustomerId</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>@customer.Email</td>
                                    <td>@(customer.Phone ?? "N/A")</td>
                                    <td>
                                        <span class="gender-badge @((bool)customer.Gender ? "gender-female" : "gender-male")">
                                        @((bool)customer.Gender ? "👩 Female" : "👨 Male")
                                        </span>
                                    </td>
                                    <td>@customer.BirthDate?.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <span class="status-badge @((bool)customer.IsActive ? "status-active" : "status-inactive")">
                                        @((bool)customer.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            @if (ViewBag.CanEditWebPage == true)
                                            {
                                                <button type="button" class="btn-sm btn-edit" onclick="openCustomerModal('@customer.CustomerId')">
                                                    ✏️ Edit
                                                </button>
                                            }
                                            @if (ViewBag.CanDeleteWebPage == true)
                                            {
                                                <div>
                                                @Html.AntiForgeryToken()
                                                <button type="button" 
                                                        class="btn-sm btn-toggle @((bool)customer.IsActive ? "deactivate" : "")"
                                                        onclick="toggleCustomerStatus('@customer.CustomerId', @customer.IsActive.ToString().ToLower())">
                                                @((bool)customer.IsActive ? "🚫 Deactivate" : "✅ Activate")
                                                </button>
                                                </div>
                                            }
                                        </div>
                                    </td>
                                </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (Model.TotalCount > Model.PageSize)
            {
                    <div class="pagination">
                    @{
                        var totalPages = (int)Math.Ceiling((double)Model.TotalCount / Model.PageSize);
                        var currentPage = Model.PageNumber;
                    }

                    @if (currentPage > 1)
                    {
                                <a href="@Url.Action("Customers", new { 
                            pageNumber = currentPage - 1, 
                            pageSize = Model.PageSize,
                            searchTerm = Model.SearchTerm,
                            statusFilter = Model.StatusFilter,
                            sortBy = Model.SortBy,
                            sortOrder = Model.SortOrder
                        })">← Previous</a>
                    }

                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        if (i == currentPage)
                        {
                                        <span class="current">@i</span>
                        }
                        else
                        {
                                        <a href="@Url.Action("Customers", new { 
                                pageNumber = i, 
                                pageSize = Model.PageSize,
                                searchTerm = Model.SearchTerm,
                                statusFilter = Model.StatusFilter,
                                sortBy = Model.SortBy,
                                sortOrder = Model.SortOrder
                            })">@i</a>
                        }
                    }

                    @if (currentPage < totalPages)
                    {
                                <a href="@Url.Action("Customers", new { 
                            pageNumber = currentPage + 1, 
                            pageSize = Model.PageSize,
                            searchTerm = Model.SearchTerm,
                            statusFilter = Model.StatusFilter,
                            sortBy = Model.SortBy,
                            sortOrder = Model.SortOrder
                        })">Next →</a>
                    }
                    </div>
            }
        </div>
    </div>
</div>

<!-- Modal Container -->
<div id="modalContainer"></div>

@section Scripts {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                @if (TempData["SuccessMessage"] != null)
                {
                    <text>
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: '@TempData["SuccessMessage"]',
                            showConfirmButton: false,
                            timer: 5000,
                            timerProgressBar: true
                        });
                    </text>
                }

                @if (TempData["ErrorMessage"] != null)
                {
                    <text>
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: '@TempData["ErrorMessage"]',
                            showConfirmButton: false,
                            timer: 5000,
                            timerProgressBar: true
                        });
                    </text>
                }
            });

            function loadCss(href) {
                const link = document.createElement('link');
                link.rel = 'stylesheet';
                link.href = href;
                document.head.appendChild(link);
            }

            function openCustomerModal(customerId = null) {
                fetch(`@Url.Action("GetCustomerModal", "Admin")?id=${customerId || ''}`)
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('modalContainer').innerHTML = html;
                        const modal = new bootstrap.Modal(document.getElementById('customerModal'));
                        if (customerId == null) {
                            loadCss('/css/customer-management/create.css');
                        }
                        else {
                            loadCss('/css/customer-management/edit.css');
                        }
                        modal.show();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to load customer form.');
                    });
            }

            function toggleCustomerStatus(customerId, isActive) {
                //event.preventDefault();
                const action = isActive ? 'deactivate' : 'activate';
                const token = $('input[name="__RequestVerificationToken"]').val();
                const confirmMessage = `Are you sure you want to ${action} this customer?`;

                Swal.fire({
                  title: confirmMessage,
                  icon: "warning",
                  showCancelButton: true,
                  confirmButtonColor: "#3085d6",
                  cancelButtonColor: "#d33",
                  confirmButtonText: "Yes"
                }).then((result) => {
                  if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("ToggleCustomerStatus", "Admin")',
                        type: 'POST',
                        data: {
                            __RequestVerificationToken: token,
                            id: customerId
                        },
                        success: function (res) {
                            if (res.success) {
                                location.reload();
                            } else {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: res.message,
                                    showConfirmButton: false,
                                    timer: 5000,
                                    timerProgressBar: true
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: 'An error occurred while deleting the employee.',
                                showConfirmButton: false,
                                timer: 5000,
                                timerProgressBar: true
                            });
                        }
                    });
                  }
                });

                
            }

            function submitCustomerForm() {
                const form = document.getElementById('createCustomerForm');
                const formData = new FormData(form);
                $(form).find('.validation-error').remove();

                fetch('@Url.Action("CreateCustomerModal", "Admin")', {
                    method: 'POST',
                    body: formData
                })
                .then(async response => {
                    const contentType = response.headers.get('content-type');

                    if (contentType && contentType.includes('application/json')) {
                        const data = await response.json();

                        if (data.success) {
                            $('#customerModal').modal('hide');
                            location.reload();
                        } else if (!data.success) {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: data.message,
                                showConfirmButton: false,
                                timer: 5000,
                                timerProgressBar: true
                            });
                            if (data.errors) {
                                console.log('Validation errors:', data.errors);
                            }
                        }
                    }
                    else {
                        const html = await response.text();
                        document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
                        document.getElementById('modalContainer').innerHTML = html;

                        const modalElement = document.getElementById('customerModal');
                        const bsModal = new bootstrap.Modal(modalElement);

                        bsModal.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'An error occurred while creating the customer.',
                        showConfirmButton: false,
                        timer: 5000,
                        timerProgressBar: true
                    });
                });
            }

            // Set default birth date to 18 years ago
            document.addEventListener('DOMContentLoaded', function() {
                const birthDateInput = document.querySelector('input[name="BirthDate"]');
                if (birthDateInput && !birthDateInput.value) {
                    const eighteenYearsAgo = new Date();
                    eighteenYearsAgo.setFullYear(eighteenYearsAgo.getFullYear() - 18);
                    birthDateInput.value = eighteenYearsAgo.toISOString().split('T')[0];
                }
            });

            function submitEditCustomerForm() {
                const form = document.getElementById('editCustomerForm');
                const formData = new FormData(form);

                fetch('@Url.Action("EditCustomerModal", "Admin")', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        $('#customerModal').modal('hide');
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                        if (data.errors) {
                            console.log('Validation errors:', data.errors);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating the customer.');
                });
            }
        </script>
}